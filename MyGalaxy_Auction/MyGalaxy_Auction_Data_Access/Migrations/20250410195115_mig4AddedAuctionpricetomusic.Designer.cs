// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyGalaxy_Auction_Data_Access.Context;

#nullable disable

namespace MyGalaxy_Auction_Data_Access.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250410195115_mig4AddedAuctionpricetomusic")]
    partial class mig4AddedAuctionpricetomusic
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Bid", b =>
                {
                    b.Property<int>("BidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BidId"));

                    b.Property<decimal>("BidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BidStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DressId")
                        .HasColumnType("int");

                    b.Property<int>("ElectronicId")
                        .HasColumnType("int");

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.Property<int>("MusicalInstrumentId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("BidId");

                    b.HasIndex("DressId");

                    b.HasIndex("ElectronicId");

                    b.HasIndex("EstateId");

                    b.HasIndex("MusicalInstrumentId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Dress", b =>
                {
                    b.Property<int>("DressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DressId"));

                    b.Property<string>("AdditionalInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AuctionPrice")
                        .HasColumnType("float");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DressId");

                    b.HasIndex("SellerId");

                    b.ToTable("Dresses");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Electronic", b =>
                {
                    b.Property<int>("ElectronicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ElectronicId"));

                    b.Property<string>("AdditionalInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AuctionPrice")
                        .HasColumnType("float");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ManufacturingYear")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ElectronicId");

                    b.HasIndex("SellerId");

                    b.ToTable("Electronics");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Estate", b =>
                {
                    b.Property<int>("EstateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstateId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AuctionPrice")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RoomCount")
                        .HasColumnType("int");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SquareMeters")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstateId");

                    b.HasIndex("SellerId");

                    b.ToTable("Estates");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.MusicalInstrument", b =>
                {
                    b.Property<int>("MusicalInstrumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MusicalInstrumentId"));

                    b.Property<double>("AuctionPrice")
                        .HasColumnType("float");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("MusicalInstrumentId");

                    b.HasIndex("SellerId");

                    b.ToTable("MusicalInstruments");

                    b.HasData(
                        new
                        {
                            MusicalInstrumentId = 1,
                            AuctionPrice = 0.0,
                            Brand = "Yamaha",
                            Description = "Great tone, excellent for beginners and professionals.",
                            EndTime = new DateTime(2025, 4, 17, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5657),
                            Image = "https://images.musicstore.de/images/1280/yamaha-fg800-natural_1_GIT0044595-000.jpg",
                            IsActive = true,
                            Name = "Yamaha Acoustic Guitar",
                            Price = 1200.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5654)
                        },
                        new
                        {
                            MusicalInstrumentId = 2,
                            AuctionPrice = 0.0,
                            Brand = "Roland",
                            Description = "88 weighted keys, great for classical and modern styles.",
                            EndTime = new DateTime(2025, 4, 20, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5665),
                            Image = "https://static.roland.com/assets/images/products/gallery/fp-30x_black_top_gal.jpg",
                            IsActive = true,
                            Name = "Roland Digital Piano",
                            Price = 3500.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5665)
                        },
                        new
                        {
                            MusicalInstrumentId = 3,
                            AuctionPrice = 0.0,
                            Brand = "Fender",
                            Description = "Classic Stratocaster style, great for rock and blues.",
                            EndTime = new DateTime(2025, 4, 15, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5670),
                            Image = "https://www.fmicassets.com/Damroot/Lg/10001/0144502500_gtr_frt_001_rr.jpg",
                            IsActive = true,
                            Name = "Fender Electric Guitar",
                            Price = 4200.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5670)
                        },
                        new
                        {
                            MusicalInstrumentId = 4,
                            AuctionPrice = 0.0,
                            Brand = "Pearl",
                            Description = "Full drum kit for studio and live performance.",
                            EndTime = new DateTime(2025, 4, 24, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5673),
                            Image = "https://m.media-amazon.com/images/I/71ubtvvV2BL._AC_SL1500_.jpg",
                            IsActive = true,
                            Name = "Pearl Drum Set",
                            Price = 5800.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5672)
                        },
                        new
                        {
                            MusicalInstrumentId = 5,
                            AuctionPrice = 0.0,
                            Brand = "Bose",
                            Description = "High quality, clear sound system for musicians.",
                            EndTime = new DateTime(2025, 4, 16, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5675),
                            Image = "https://www.bose.com/content/dam/Bose_DAM/Web/consumer_web/portable/portable_speakers/portable_speakers_front_0_0.jpg",
                            IsActive = true,
                            Name = "Bose Sound System",
                            Price = 2500.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5675)
                        },
                        new
                        {
                            MusicalInstrumentId = 6,
                            AuctionPrice = 0.0,
                            Brand = "Casio",
                            Description = "Compact, versatile keyboard with built-in sounds.",
                            EndTime = new DateTime(2025, 4, 18, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5677),
                            Image = "https://images.casio.com/us/casio-keyboard/sa76.jpg",
                            IsActive = true,
                            Name = "Casio Keyboard",
                            Price = 550.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5677)
                        },
                        new
                        {
                            MusicalInstrumentId = 7,
                            AuctionPrice = 0.0,
                            Brand = "Ibanez",
                            Description = "Famous for its thin neck and high-speed playability.",
                            EndTime = new DateTime(2025, 4, 22, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5679),
                            Image = "https://www.ibanez.com/electric-guitars/rg/RG350DX_BKN_01.jpg",
                            IsActive = true,
                            Name = "Ibanez Electric Guitar",
                            Price = 1500.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5679)
                        },
                        new
                        {
                            MusicalInstrumentId = 8,
                            AuctionPrice = 0.0,
                            Brand = "Korg",
                            Description = "Professional-grade synthesizer for music production.",
                            EndTime = new DateTime(2025, 4, 19, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5682),
                            Image = "https://www.korg.com/us/products/dj/sq1/images/sq1_photo_01.jpg",
                            IsActive = true,
                            Name = "Korg Synthesizer",
                            Price = 3000.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5681)
                        },
                        new
                        {
                            MusicalInstrumentId = 9,
                            AuctionPrice = 0.0,
                            Brand = "Ludwig",
                            Description = "Vintage drum set with excellent sound quality.",
                            EndTime = new DateTime(2025, 4, 17, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5684),
                            Image = "https://m.media-amazon.com/images/I/81TcWrq8JrL._AC_SL1500_.jpg",
                            IsActive = true,
                            Name = "Ludwig Drum Kit",
                            Price = 4500.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5683)
                        },
                        new
                        {
                            MusicalInstrumentId = 10,
                            AuctionPrice = 0.0,
                            Brand = "Shure",
                            Description = "High quality vocal microphone, great for studio recordings.",
                            EndTime = new DateTime(2025, 4, 16, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5686),
                            Image = "https://static.shure.com/fgf/7fc/07e/0c51c0cd8cfb61d75d.jpg",
                            IsActive = true,
                            Name = "Shure Microphone",
                            Price = 350.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5685)
                        },
                        new
                        {
                            MusicalInstrumentId = 11,
                            AuctionPrice = 0.0,
                            Brand = "Sennheiser",
                            Description = "Studio quality headphones with excellent noise cancellation.",
                            EndTime = new DateTime(2025, 4, 21, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5688),
                            Image = "https://www.sennheiser.com/media/global/hd660s-m0m.jpg",
                            IsActive = true,
                            Name = "Sennheiser Headphones",
                            Price = 250.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5688)
                        },
                        new
                        {
                            MusicalInstrumentId = 12,
                            AuctionPrice = 0.0,
                            Brand = "Mackie",
                            Description = "Professional studio monitors for accurate sound mixing.",
                            EndTime = new DateTime(2025, 4, 23, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5690),
                            Image = "https://www.mackie.com/sites/default/files/styles/product_gallery/public/2018-06/mr5mk3-front-grill_0.jpg",
                            IsActive = true,
                            Name = "Mackie Studio Monitors",
                            Price = 1800.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5690)
                        },
                        new
                        {
                            MusicalInstrumentId = 13,
                            AuctionPrice = 0.0,
                            Brand = "Tama",
                            Description = "Full 5-piece drum kit for drummers of all levels.",
                            EndTime = new DateTime(2025, 4, 18, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5692),
                            Image = "https://www.tama.com/eu/wp-content/uploads/sites/2/2020/06/Starclassic.jpg",
                            IsActive = true,
                            Name = "Tama Drum Set",
                            Price = 4000.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5692)
                        },
                        new
                        {
                            MusicalInstrumentId = 14,
                            AuctionPrice = 0.0,
                            Brand = "Roland",
                            Description = "Electronic drum pads with great sensitivity and response.",
                            EndTime = new DateTime(2025, 4, 22, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5695),
                            Image = "https://static.roland.com/assets/images/products/gallery/spd-sx-top-gallery.jpg",
                            IsActive = true,
                            Name = "Roland Drum Pads",
                            Price = 1200.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5694)
                        },
                        new
                        {
                            MusicalInstrumentId = 15,
                            AuctionPrice = 0.0,
                            Brand = "Gretsch",
                            Description = "Known for its smooth tone, great for jazz and blues.",
                            EndTime = new DateTime(2025, 4, 19, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5697),
                            Image = "https://www.gretschguitars.com/uploads/media/default/0001/05/8e98d84bdfef0a25d5bcf95a59e682ee105580de.jpg",
                            IsActive = true,
                            Name = "Gretsch Electric Guitar",
                            Price = 2200.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5696)
                        },
                        new
                        {
                            MusicalInstrumentId = 16,
                            AuctionPrice = 0.0,
                            Brand = "Vox",
                            Description = "Classic British tone, perfect for rock guitarists.",
                            EndTime = new DateTime(2025, 4, 25, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5699),
                            Image = "https://www.voxamps.com/wp-content/uploads/2019/10/AC30_C1_3Q_copy.jpg",
                            IsActive = true,
                            Name = "Vox Amplifier",
                            Price = 1500.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5698)
                        },
                        new
                        {
                            MusicalInstrumentId = 17,
                            AuctionPrice = 0.0,
                            Brand = "Martin",
                            Description = "Legendary acoustic guitars known for their excellent sound.",
                            EndTime = new DateTime(2025, 4, 24, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5701),
                            Image = "https://images.martinguitar.com/assets/guitars/000-15M.jpg",
                            IsActive = true,
                            Name = "Martin Acoustic Guitar",
                            Price = 3000.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5700)
                        },
                        new
                        {
                            MusicalInstrumentId = 18,
                            AuctionPrice = 0.0,
                            Brand = "Peavey",
                            Description = "Great bass guitar for beginners and intermediate players.",
                            EndTime = new DateTime(2025, 4, 20, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5703),
                            Image = "https://www.peavey.com/media/wysiwyg/artist/Bass/Bass_Guitar.jpg",
                            IsActive = true,
                            Name = "Peavey Bass Guitar",
                            Price = 800.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5703)
                        },
                        new
                        {
                            MusicalInstrumentId = 19,
                            AuctionPrice = 0.0,
                            Brand = "Line 6",
                            Description = "Modern amp with tons of effects and high-quality sound.",
                            EndTime = new DateTime(2025, 4, 21, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5705),
                            Image = "https://line6.com/wp-content/uploads/2020/02/HelixLT_Studio_Guitar_Amplifier.jpg",
                            IsActive = true,
                            Name = "Line 6 Guitar Amp",
                            Price = 1300.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5705)
                        },
                        new
                        {
                            MusicalInstrumentId = 20,
                            AuctionPrice = 0.0,
                            Brand = "Pearl",
                            Description = "High-quality snare drum, great for any drum set.",
                            EndTime = new DateTime(2025, 4, 22, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5707),
                            Image = "https://images.pearldrum.com/wp-content/uploads/sites/2/2020/04/pearl-snare.jpg",
                            IsActive = true,
                            Name = "Pearl Snare Drum",
                            Price = 350.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 19, 51, 14, 571, DateTimeKind.Utc).AddTicks(5707)
                        });
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.PaymentHistory", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DressId")
                        .HasColumnType("int");

                    b.Property<int>("ElectronicId")
                        .HasColumnType("int");

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MusicalInstrumentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StripePaymentIntentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("DressId")
                        .IsUnique();

                    b.HasIndex("ElectronicId")
                        .IsUnique();

                    b.HasIndex("EstateId")
                        .IsUnique();

                    b.HasIndex("MusicalInstrumentId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("PaymentHistories");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("AdditionalInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AuctionPrice")
                        .HasColumnType("float");

                    b.Property<string>("BrandAndModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EngineCapacity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ManufacturingYear")
                        .HasColumnType("int");

                    b.Property<int>("Millage")
                        .HasColumnType("int");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("VehicleId");

                    b.HasIndex("SellerId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Bid", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Dress", "Dress")
                        .WithMany("Bids")
                        .HasForeignKey("DressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Electronic", "Electronic")
                        .WithMany("Bids")
                        .HasForeignKey("ElectronicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Estate", "Estate")
                        .WithMany("Bids")
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.MusicalInstrument", "MusicalInstrument")
                        .WithMany("Bids")
                        .HasForeignKey("MusicalInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", "User")
                        .WithMany("Bids")
                        .HasForeignKey("UserId");

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Vehicle", "Vehicle")
                        .WithMany("Bids")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dress");

                    b.Navigation("Electronic");

                    b.Navigation("Estate");

                    b.Navigation("MusicalInstrument");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Dress", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", "Seller")
                        .WithMany("Dresses")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Electronic", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", "Seller")
                        .WithMany("Electronics")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Estate", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", "Seller")
                        .WithMany("Estates")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.MusicalInstrument", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", "Seller")
                        .WithMany("MusicalInstruments")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.PaymentHistory", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Dress", "Dress")
                        .WithOne("Payment")
                        .HasForeignKey("MyGalaxy_Auction_Data_Access.Domain.PaymentHistory", "DressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Electronic", "Electronic")
                        .WithOne("Payment")
                        .HasForeignKey("MyGalaxy_Auction_Data_Access.Domain.PaymentHistory", "ElectronicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Estate", "Estate")
                        .WithOne("Payment")
                        .HasForeignKey("MyGalaxy_Auction_Data_Access.Domain.PaymentHistory", "EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.MusicalInstrument", "MusicalInstrument")
                        .WithOne("Payment")
                        .HasForeignKey("MyGalaxy_Auction_Data_Access.Domain.PaymentHistory", "MusicalInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", "User")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Vehicle", "Vehicle")
                        .WithOne("Payment")
                        .HasForeignKey("MyGalaxy_Auction_Data_Access.Domain.PaymentHistory", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dress");

                    b.Navigation("Electronic");

                    b.Navigation("Estate");

                    b.Navigation("MusicalInstrument");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Vehicle", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", "Seller")
                        .WithMany("Vehicles")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Dress", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Electronic", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Estate", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.MusicalInstrument", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Vehicle", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Dresses");

                    b.Navigation("Electronics");

                    b.Navigation("Estates");

                    b.Navigation("MusicalInstruments");

                    b.Navigation("PaymentHistories");

                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
