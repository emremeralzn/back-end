// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyGalaxy_Auction_Data_Access.Context;

#nullable disable

namespace MyGalaxy_Auction_Data_Access.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250410200837_mig6addDatatoEstateTable")]
    partial class mig6addDatatoEstateTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Bid", b =>
                {
                    b.Property<int>("BidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BidId"));

                    b.Property<decimal>("BidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BidStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DressId")
                        .HasColumnType("int");

                    b.Property<int>("ElectronicId")
                        .HasColumnType("int");

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.Property<int>("MusicalInstrumentId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("BidId");

                    b.HasIndex("DressId");

                    b.HasIndex("ElectronicId");

                    b.HasIndex("EstateId");

                    b.HasIndex("MusicalInstrumentId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Dress", b =>
                {
                    b.Property<int>("DressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DressId"));

                    b.Property<string>("AdditionalInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AuctionPrice")
                        .HasColumnType("float");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DressId");

                    b.HasIndex("SellerId");

                    b.ToTable("Dresses");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Electronic", b =>
                {
                    b.Property<int>("ElectronicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ElectronicId"));

                    b.Property<string>("AdditionalInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AuctionPrice")
                        .HasColumnType("float");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ManufacturingYear")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ElectronicId");

                    b.HasIndex("SellerId");

                    b.ToTable("Electronics");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Estate", b =>
                {
                    b.Property<int>("EstateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstateId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AuctionPrice")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RoomCount")
                        .HasColumnType("int");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SquareMeters")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstateId");

                    b.HasIndex("SellerId");

                    b.ToTable("Estates");

                    b.HasData(
                        new
                        {
                            EstateId = 1,
                            Address = "İstanbul, Beşiktaş",
                            AuctionPrice = 3550000.0,
                            Description = "Mükemmel manzara",
                            EndTime = new DateTime(2025, 4, 17, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(1958),
                            Image = "estate1.jpg",
                            IsActive = true,
                            Price = 3500000m,
                            RoomCount = 3,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            SquareMeters = 120,
                            StartTime = new DateTime(2025, 4, 10, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(1946),
                            Title = "Deniz Manzaralı Daire"
                        },
                        new
                        {
                            EstateId = 2,
                            Address = "İzmir, Urla",
                            AuctionPrice = 8550000.0,
                            Description = "Havuzlu, güvenlikli site içinde",
                            EndTime = new DateTime(2025, 4, 20, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(1970),
                            Image = "estate2.jpg",
                            IsActive = true,
                            Price = 8500000m,
                            RoomCount = 5,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            SquareMeters = 300,
                            StartTime = new DateTime(2025, 4, 10, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(1969),
                            Title = "Lüks Villa"
                        },
                        new
                        {
                            EstateId = 3,
                            Address = "Ankara, Çankaya",
                            AuctionPrice = 760000.0,
                            Description = "Metroya yakın",
                            EndTime = new DateTime(2025, 4, 15, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(1976),
                            Image = "estate3.jpg",
                            IsActive = true,
                            Price = 750000m,
                            RoomCount = 1,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            SquareMeters = 45,
                            StartTime = new DateTime(2025, 4, 10, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(1974),
                            Title = "Öğrenciye Uygun 1+1"
                        },
                        new
                        {
                            EstateId = 4,
                            Address = "Bolu, Merkez",
                            AuctionPrice = 1220000.0,
                            Description = "Sessiz sakin ortam",
                            EndTime = new DateTime(2025, 4, 16, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(1980),
                            Image = "estate4.jpg",
                            IsActive = true,
                            Price = 1200000m,
                            RoomCount = 2,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            SquareMeters = 90,
                            StartTime = new DateTime(2025, 4, 10, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(1979),
                            Title = "Doğa İçinde Ev"
                        },
                        new
                        {
                            EstateId = 5,
                            Address = "Balıkesir, Edremit",
                            AuctionPrice = 960000.0,
                            Description = "Müstakil ve geniş bahçeli",
                            EndTime = new DateTime(2025, 4, 18, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(1982),
                            Image = "estate5.jpg",
                            IsActive = true,
                            Price = 950000m,
                            RoomCount = 3,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            SquareMeters = 100,
                            StartTime = new DateTime(2025, 4, 10, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(1982),
                            Title = "Bahçeli Köy Evi"
                        },
                        new
                        {
                            EstateId = 6,
                            Address = "İstanbul, Şişli",
                            AuctionPrice = 2430000.0,
                            Description = "İşlek lokasyon",
                            EndTime = new DateTime(2025, 4, 14, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(1989),
                            Image = "estate6.jpg",
                            IsActive = true,
                            Price = 2400000m,
                            RoomCount = 2,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            SquareMeters = 80,
                            StartTime = new DateTime(2025, 4, 10, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(1988),
                            Title = "Şehir Merkezinde Ofis"
                        },
                        new
                        {
                            EstateId = 7,
                            Address = "İstanbul, Kadıköy",
                            AuctionPrice = 1720000.0,
                            Description = "Yüksek tavanlı modern tasarım",
                            EndTime = new DateTime(2025, 4, 17, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(1992),
                            Image = "estate7.jpg",
                            IsActive = true,
                            Price = 1700000m,
                            RoomCount = 1,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            SquareMeters = 70,
                            StartTime = new DateTime(2025, 4, 10, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(1991),
                            Title = "Satılık Loft Daire"
                        },
                        new
                        {
                            EstateId = 8,
                            Address = "Gebze, Kocaeli",
                            AuctionPrice = 810000.0,
                            Description = "Geniş ve yükseklik avantajlı",
                            EndTime = new DateTime(2025, 4, 15, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(1995),
                            Image = "estate8.jpg",
                            IsActive = true,
                            Price = 800000m,
                            RoomCount = 1,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            SquareMeters = 200,
                            StartTime = new DateTime(2025, 4, 10, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(1994),
                            Title = "Kiralık Depo Alanı"
                        },
                        new
                        {
                            EstateId = 9,
                            Address = "Antalya, Manavgat",
                            AuctionPrice = 1320000.0,
                            Description = "İmarlı tapulu",
                            EndTime = new DateTime(2025, 4, 25, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(1998),
                            Image = "estate9.jpg",
                            IsActive = true,
                            Price = 1300000m,
                            RoomCount = 0,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            SquareMeters = 500,
                            StartTime = new DateTime(2025, 4, 10, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(1997),
                            Title = "Yatırım İçin Arsa"
                        },
                        new
                        {
                            EstateId = 10,
                            Address = "İstanbul, Sarıyer",
                            AuctionPrice = 6550000.0,
                            Description = "Eşsiz manzara ve konfor",
                            EndTime = new DateTime(2025, 4, 20, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(2001),
                            Image = "estate10.jpg",
                            IsActive = true,
                            Price = 6500000m,
                            RoomCount = 4,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            SquareMeters = 180,
                            StartTime = new DateTime(2025, 4, 10, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(2000),
                            Title = "Boğaz Manzaralı Dubleks"
                        },
                        new
                        {
                            EstateId = 11,
                            Address = "Samsun, Atakum",
                            AuctionPrice = 875000.0,
                            Description = "Yeni yapılmış",
                            EndTime = new DateTime(2025, 4, 16, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(2004),
                            Image = "estate11.jpg",
                            IsActive = true,
                            Price = 870000m,
                            RoomCount = 2,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            SquareMeters = 85,
                            StartTime = new DateTime(2025, 4, 10, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(2003),
                            Title = "Uygun Fiyatlı Daire"
                        },
                        new
                        {
                            EstateId = 12,
                            Address = "Bursa, Osmangazi",
                            AuctionPrice = 625000.0,
                            Description = "Yatırımlık eşyalı",
                            EndTime = new DateTime(2025, 4, 14, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(2008),
                            Image = "estate12.jpg",
                            IsActive = true,
                            Price = 620000m,
                            RoomCount = 1,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            SquareMeters = 40,
                            StartTime = new DateTime(2025, 4, 10, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(2007),
                            Title = "Merkezi Konumda Stüdyo"
                        },
                        new
                        {
                            EstateId = 13,
                            Address = "Eskişehir, Tepebaşı",
                            AuctionPrice = 2820000.0,
                            Description = "Aile yaşamına uygun",
                            EndTime = new DateTime(2025, 4, 19, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(2011),
                            Image = "estate13.jpg",
                            IsActive = true,
                            Price = 2800000m,
                            RoomCount = 5,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            SquareMeters = 250,
                            StartTime = new DateTime(2025, 4, 10, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(2011),
                            Title = "Bahçeli Tripleks"
                        },
                        new
                        {
                            EstateId = 14,
                            Address = "Konya, Selçuklu",
                            AuctionPrice = 1010000.0,
                            Description = "Site içerisinde sosyal alanlı",
                            EndTime = new DateTime(2025, 4, 17, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(2015),
                            Image = "estate14.jpg",
                            IsActive = true,
                            Price = 1000000m,
                            RoomCount = 2,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            SquareMeters = 95,
                            StartTime = new DateTime(2025, 4, 10, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(2014),
                            Title = "Yeni Projede 2+1"
                        },
                        new
                        {
                            EstateId = 15,
                            Address = "Muğla, Fethiye",
                            AuctionPrice = 1465000.0,
                            Description = "Yaz-kış yaşam için ideal",
                            EndTime = new DateTime(2025, 4, 16, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(2018),
                            Image = "estate15.jpg",
                            IsActive = true,
                            Price = 1450000m,
                            RoomCount = 3,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            SquareMeters = 110,
                            StartTime = new DateTime(2025, 4, 10, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(2017),
                            Title = "Dağ Manzaralı Yazlık"
                        },
                        new
                        {
                            EstateId = 16,
                            Address = "Ankara, Kızılay",
                            AuctionPrice = 3930000.0,
                            Description = "Kurumsal firmaya özel",
                            EndTime = new DateTime(2025, 4, 15, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(2023),
                            Image = "estate16.jpg",
                            IsActive = true,
                            Price = 3900000m,
                            RoomCount = 4,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            SquareMeters = 150,
                            StartTime = new DateTime(2025, 4, 10, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(2022),
                            Title = "Prestijli Ofis Katı"
                        },
                        new
                        {
                            EstateId = 17,
                            Address = "İzmir, Çeşme",
                            AuctionPrice = 12100000.0,
                            Description = "Kendine ait iskeleli",
                            EndTime = new DateTime(2025, 4, 22, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(2025),
                            Image = "estate17.jpg",
                            IsActive = true,
                            Price = 12000000m,
                            RoomCount = 6,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            SquareMeters = 400,
                            StartTime = new DateTime(2025, 4, 10, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(2025),
                            Title = "Denize Sıfır Villa"
                        },
                        new
                        {
                            EstateId = 18,
                            Address = "Trabzon, Ortahisar",
                            AuctionPrice = 905000.0,
                            Description = "Aileye uygun",
                            EndTime = new DateTime(2025, 4, 16, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(2029),
                            Image = "estate18.jpg",
                            IsActive = true,
                            Price = 900000m,
                            RoomCount = 3,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            SquareMeters = 100,
                            StartTime = new DateTime(2025, 4, 10, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(2028),
                            Title = "Sakin Sokakta Daire"
                        },
                        new
                        {
                            EstateId = 19,
                            Address = "Tekirdağ, Süleymanpaşa",
                            AuctionPrice = 1120000.0,
                            Description = "Yola cepheli",
                            EndTime = new DateTime(2025, 4, 24, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(2031),
                            Image = "estate19.jpg",
                            IsActive = true,
                            Price = 1100000m,
                            RoomCount = 0,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            SquareMeters = 600,
                            StartTime = new DateTime(2025, 4, 10, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(2031),
                            Title = "Konut İmarlı Arsa"
                        },
                        new
                        {
                            EstateId = 20,
                            Address = "İstanbul, Ataşehir",
                            AuctionPrice = 2220000.0,
                            Description = "Site içi, 7/24 güvenlik",
                            EndTime = new DateTime(2025, 4, 17, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(2034),
                            Image = "estate20.jpg",
                            IsActive = true,
                            Price = 2200000m,
                            RoomCount = 2,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            SquareMeters = 100,
                            StartTime = new DateTime(2025, 4, 10, 23, 8, 36, 651, DateTimeKind.Local).AddTicks(2034),
                            Title = "Lüks Rezidans Dairesi"
                        });
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.MusicalInstrument", b =>
                {
                    b.Property<int>("MusicalInstrumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MusicalInstrumentId"));

                    b.Property<double>("AuctionPrice")
                        .HasColumnType("float");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("MusicalInstrumentId");

                    b.HasIndex("SellerId");

                    b.ToTable("MusicalInstruments");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.PaymentHistory", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DressId")
                        .HasColumnType("int");

                    b.Property<int>("ElectronicId")
                        .HasColumnType("int");

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MusicalInstrumentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StripePaymentIntentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("DressId")
                        .IsUnique();

                    b.HasIndex("ElectronicId")
                        .IsUnique();

                    b.HasIndex("EstateId")
                        .IsUnique();

                    b.HasIndex("MusicalInstrumentId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("PaymentHistories");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("AdditionalInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AuctionPrice")
                        .HasColumnType("float");

                    b.Property<string>("BrandAndModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EngineCapacity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ManufacturingYear")
                        .HasColumnType("int");

                    b.Property<int>("Millage")
                        .HasColumnType("int");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("VehicleId");

                    b.HasIndex("SellerId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Bid", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Dress", "Dress")
                        .WithMany("Bids")
                        .HasForeignKey("DressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Electronic", "Electronic")
                        .WithMany("Bids")
                        .HasForeignKey("ElectronicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Estate", "Estate")
                        .WithMany("Bids")
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.MusicalInstrument", "MusicalInstrument")
                        .WithMany("Bids")
                        .HasForeignKey("MusicalInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", "User")
                        .WithMany("Bids")
                        .HasForeignKey("UserId");

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Vehicle", "Vehicle")
                        .WithMany("Bids")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dress");

                    b.Navigation("Electronic");

                    b.Navigation("Estate");

                    b.Navigation("MusicalInstrument");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Dress", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", "Seller")
                        .WithMany("Dresses")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Electronic", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", "Seller")
                        .WithMany("Electronics")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Estate", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", "Seller")
                        .WithMany("Estates")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.MusicalInstrument", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", "Seller")
                        .WithMany("MusicalInstruments")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.PaymentHistory", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Dress", "Dress")
                        .WithOne("Payment")
                        .HasForeignKey("MyGalaxy_Auction_Data_Access.Domain.PaymentHistory", "DressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Electronic", "Electronic")
                        .WithOne("Payment")
                        .HasForeignKey("MyGalaxy_Auction_Data_Access.Domain.PaymentHistory", "ElectronicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Estate", "Estate")
                        .WithOne("Payment")
                        .HasForeignKey("MyGalaxy_Auction_Data_Access.Domain.PaymentHistory", "EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.MusicalInstrument", "MusicalInstrument")
                        .WithOne("Payment")
                        .HasForeignKey("MyGalaxy_Auction_Data_Access.Domain.PaymentHistory", "MusicalInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", "User")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Vehicle", "Vehicle")
                        .WithOne("Payment")
                        .HasForeignKey("MyGalaxy_Auction_Data_Access.Domain.PaymentHistory", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dress");

                    b.Navigation("Electronic");

                    b.Navigation("Estate");

                    b.Navigation("MusicalInstrument");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Vehicle", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", "Seller")
                        .WithMany("Vehicles")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Dress", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Electronic", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Estate", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.MusicalInstrument", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Vehicle", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Dresses");

                    b.Navigation("Electronics");

                    b.Navigation("Estates");

                    b.Navigation("MusicalInstruments");

                    b.Navigation("PaymentHistories");

                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
