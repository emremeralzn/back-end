// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyGalaxy_Auction_Data_Access.Context;

#nullable disable

namespace MyGalaxy_Auction_Data_Access.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250410201838_mig7AddedDatatoElectronic")]
    partial class mig7AddedDatatoElectronic
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Bid", b =>
                {
                    b.Property<int>("BidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BidId"));

                    b.Property<decimal>("BidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BidStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DressId")
                        .HasColumnType("int");

                    b.Property<int>("ElectronicId")
                        .HasColumnType("int");

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.Property<int>("MusicalInstrumentId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("BidId");

                    b.HasIndex("DressId");

                    b.HasIndex("ElectronicId");

                    b.HasIndex("EstateId");

                    b.HasIndex("MusicalInstrumentId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Dress", b =>
                {
                    b.Property<int>("DressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DressId"));

                    b.Property<string>("AdditionalInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AuctionPrice")
                        .HasColumnType("float");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DressId");

                    b.HasIndex("SellerId");

                    b.ToTable("Dresses");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Electronic", b =>
                {
                    b.Property<int>("ElectronicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ElectronicId"));

                    b.Property<string>("AdditionalInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AuctionPrice")
                        .HasColumnType("float");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ManufacturingYear")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ElectronicId");

                    b.HasIndex("SellerId");

                    b.ToTable("Electronics");

                    b.HasData(
                        new
                        {
                            ElectronicId = 1,
                            AdditionalInformation = "Az kullanılmış, kutulu",
                            AuctionPrice = 0.0,
                            Brand = "Apple",
                            EndTime = new DateTime(2025, 4, 20, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7626),
                            Image = "https://example.com/images/iphone13.jpg",
                            IsActive = true,
                            ManufacturingYear = 2021,
                            Model = "iPhone 13",
                            Price = 999.99m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7614)
                        },
                        new
                        {
                            ElectronicId = 2,
                            AdditionalInformation = "Garantili",
                            AuctionPrice = 0.0,
                            Brand = "Samsung",
                            EndTime = new DateTime(2025, 4, 17, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7636),
                            Image = "https://example.com/images/s22.jpg",
                            IsActive = true,
                            ManufacturingYear = 2022,
                            Model = "Galaxy S22",
                            Price = 899.99m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7635)
                        },
                        new
                        {
                            ElectronicId = 3,
                            AdditionalInformation = "2 kol ile birlikte",
                            AuctionPrice = 0.0,
                            Brand = "Sony",
                            EndTime = new DateTime(2025, 4, 24, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7639),
                            Image = "https://example.com/images/ps5.jpg",
                            IsActive = true,
                            ManufacturingYear = 2020,
                            Model = "PlayStation 5",
                            Price = 699.99m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7638)
                        },
                        new
                        {
                            ElectronicId = 4,
                            AdditionalInformation = "Kutu dahil",
                            AuctionPrice = 0.0,
                            Brand = "Microsoft",
                            EndTime = new DateTime(2025, 4, 19, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7642),
                            Image = "https://example.com/images/xbox.jpg",
                            IsActive = true,
                            ManufacturingYear = 2020,
                            Model = "Xbox Series X",
                            Price = 649.99m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7641)
                        },
                        new
                        {
                            ElectronicId = 5,
                            AdditionalInformation = "Hafif çizik",
                            AuctionPrice = 0.0,
                            Brand = "Dell",
                            EndTime = new DateTime(2025, 4, 15, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7645),
                            Image = "https://example.com/images/xps13.jpg",
                            IsActive = true,
                            ManufacturingYear = 2021,
                            Model = "XPS 13",
                            Price = 1200.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7644)
                        },
                        new
                        {
                            ElectronicId = 6,
                            AdditionalInformation = "Touch ekran",
                            AuctionPrice = 0.0,
                            Brand = "HP",
                            EndTime = new DateTime(2025, 4, 18, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7647),
                            Image = "https://example.com/images/spectre.jpg",
                            IsActive = true,
                            ManufacturingYear = 2022,
                            Model = "Spectre x360",
                            Price = 1300.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7647)
                        },
                        new
                        {
                            ElectronicId = 7,
                            AdditionalInformation = "Pil döngüsü 50",
                            AuctionPrice = 0.0,
                            Brand = "Apple",
                            EndTime = new DateTime(2025, 4, 21, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7650),
                            Image = "https://example.com/images/macbook.jpg",
                            IsActive = true,
                            ManufacturingYear = 2021,
                            Model = "MacBook Air M1",
                            Price = 999.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7649)
                        },
                        new
                        {
                            ElectronicId = 8,
                            AdditionalInformation = "İş için ideal",
                            AuctionPrice = 0.0,
                            Brand = "Lenovo",
                            EndTime = new DateTime(2025, 4, 16, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7653),
                            Image = "https://example.com/images/thinkpad.jpg",
                            IsActive = true,
                            ManufacturingYear = 2021,
                            Model = "ThinkPad X1 Carbon",
                            Price = 1100.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7652)
                        },
                        new
                        {
                            ElectronicId = 9,
                            AdditionalInformation = "Fotoğrafçılar için ideal",
                            AuctionPrice = 0.0,
                            Brand = "Canon",
                            EndTime = new DateTime(2025, 4, 22, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7655),
                            Image = "https://example.com/images/eosr.jpg",
                            IsActive = true,
                            ManufacturingYear = 2019,
                            Model = "EOS R",
                            Price = 1500.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7655)
                        },
                        new
                        {
                            ElectronicId = 10,
                            AdditionalInformation = "Hobi için drone",
                            AuctionPrice = 0.0,
                            Brand = "DJI",
                            EndTime = new DateTime(2025, 4, 20, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7659),
                            Image = "https://example.com/images/mavic.jpg",
                            IsActive = true,
                            ManufacturingYear = 2020,
                            Model = "Mavic Air 2",
                            Price = 800.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7657)
                        },
                        new
                        {
                            ElectronicId = 11,
                            AdditionalInformation = "Tablet, kalem dahil",
                            AuctionPrice = 0.0,
                            Brand = "Samsung",
                            EndTime = new DateTime(2025, 4, 15, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7661),
                            Image = "https://example.com/images/tabs8.jpg",
                            IsActive = true,
                            ManufacturingYear = 2022,
                            Model = "Galaxy Tab S8",
                            Price = 600.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7661)
                        },
                        new
                        {
                            ElectronicId = 12,
                            AdditionalInformation = "11 inch ekran",
                            AuctionPrice = 0.0,
                            Brand = "Apple",
                            EndTime = new DateTime(2025, 4, 14, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7664),
                            Image = "https://example.com/images/ipad.jpg",
                            IsActive = true,
                            ManufacturingYear = 2021,
                            Model = "iPad Pro",
                            Price = 1000.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7664)
                        },
                        new
                        {
                            ElectronicId = 13,
                            AdditionalInformation = "Gürültü engelleme",
                            AuctionPrice = 0.0,
                            Brand = "Bose",
                            EndTime = new DateTime(2025, 4, 13, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7667),
                            Image = "https://example.com/images/bose.jpg",
                            IsActive = true,
                            ManufacturingYear = 2022,
                            Model = "QuietComfort 45",
                            Price = 299.99m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7666)
                        },
                        new
                        {
                            ElectronicId = 14,
                            AdditionalInformation = "Kulak üstü kulaklık",
                            AuctionPrice = 0.0,
                            Brand = "Sony",
                            EndTime = new DateTime(2025, 4, 17, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7669),
                            Image = "https://example.com/images/sony.jpg",
                            IsActive = true,
                            ManufacturingYear = 2021,
                            Model = "WH-1000XM4",
                            Price = 279.99m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7669)
                        },
                        new
                        {
                            ElectronicId = 15,
                            AdditionalInformation = "Aksiyon kamerası",
                            AuctionPrice = 0.0,
                            Brand = "GoPro",
                            EndTime = new DateTime(2025, 4, 16, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7672),
                            Image = "https://example.com/images/gopro.jpg",
                            IsActive = true,
                            ManufacturingYear = 2021,
                            Model = "Hero 10",
                            Price = 399.99m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7671)
                        },
                        new
                        {
                            ElectronicId = 16,
                            AdditionalInformation = "Oyun bilgisayarı",
                            AuctionPrice = 0.0,
                            Brand = "Asus",
                            EndTime = new DateTime(2025, 4, 19, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7675),
                            Image = "https://example.com/images/rog.jpg",
                            IsActive = true,
                            ManufacturingYear = 2022,
                            Model = "ROG Zephyrus G14",
                            Price = 1400.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7674)
                        },
                        new
                        {
                            ElectronicId = 17,
                            AdditionalInformation = "Akıllı saat",
                            AuctionPrice = 0.0,
                            Brand = "Apple",
                            EndTime = new DateTime(2025, 4, 18, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7677),
                            Image = "https://example.com/images/watch.jpg",
                            IsActive = true,
                            ManufacturingYear = 2021,
                            Model = "Apple Watch Series 7",
                            Price = 450.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7677)
                        },
                        new
                        {
                            ElectronicId = 18,
                            AdditionalInformation = "Outdoor saat",
                            AuctionPrice = 0.0,
                            Brand = "Garmin",
                            EndTime = new DateTime(2025, 4, 15, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7680),
                            Image = "https://example.com/images/fenix.jpg",
                            IsActive = true,
                            ManufacturingYear = 2020,
                            Model = "Fenix 6",
                            Price = 500.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7679)
                        },
                        new
                        {
                            ElectronicId = 19,
                            AdditionalInformation = "Gamer laptop",
                            AuctionPrice = 0.0,
                            Brand = "Razer",
                            EndTime = new DateTime(2025, 4, 21, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7682),
                            Image = "https://example.com/images/razer.jpg",
                            IsActive = true,
                            ManufacturingYear = 2022,
                            Model = "Blade 15",
                            Price = 1600.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7682)
                        },
                        new
                        {
                            ElectronicId = 20,
                            AdditionalInformation = "4K OLED TV",
                            AuctionPrice = 0.0,
                            Brand = "LG",
                            EndTime = new DateTime(2025, 4, 23, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7685),
                            Image = "https://example.com/images/oled.jpg",
                            IsActive = true,
                            ManufacturingYear = 2020,
                            Model = "OLED CX",
                            Price = 1800.00m,
                            SellerId = "9defb4b8-7df0-4f6a-a49a-ddc0c68c9079",
                            StartTime = new DateTime(2025, 4, 10, 23, 18, 37, 635, DateTimeKind.Local).AddTicks(7684)
                        });
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Estate", b =>
                {
                    b.Property<int>("EstateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstateId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AuctionPrice")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RoomCount")
                        .HasColumnType("int");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SquareMeters")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstateId");

                    b.HasIndex("SellerId");

                    b.ToTable("Estates");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.MusicalInstrument", b =>
                {
                    b.Property<int>("MusicalInstrumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MusicalInstrumentId"));

                    b.Property<double>("AuctionPrice")
                        .HasColumnType("float");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("MusicalInstrumentId");

                    b.HasIndex("SellerId");

                    b.ToTable("MusicalInstruments");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.PaymentHistory", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DressId")
                        .HasColumnType("int");

                    b.Property<int>("ElectronicId")
                        .HasColumnType("int");

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MusicalInstrumentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StripePaymentIntentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("DressId")
                        .IsUnique();

                    b.HasIndex("ElectronicId")
                        .IsUnique();

                    b.HasIndex("EstateId")
                        .IsUnique();

                    b.HasIndex("MusicalInstrumentId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("PaymentHistories");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("AdditionalInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AuctionPrice")
                        .HasColumnType("float");

                    b.Property<string>("BrandAndModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EngineCapacity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ManufacturingYear")
                        .HasColumnType("int");

                    b.Property<int>("Millage")
                        .HasColumnType("int");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("VehicleId");

                    b.HasIndex("SellerId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Bid", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Dress", "Dress")
                        .WithMany("Bids")
                        .HasForeignKey("DressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Electronic", "Electronic")
                        .WithMany("Bids")
                        .HasForeignKey("ElectronicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Estate", "Estate")
                        .WithMany("Bids")
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.MusicalInstrument", "MusicalInstrument")
                        .WithMany("Bids")
                        .HasForeignKey("MusicalInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", "User")
                        .WithMany("Bids")
                        .HasForeignKey("UserId");

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Vehicle", "Vehicle")
                        .WithMany("Bids")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dress");

                    b.Navigation("Electronic");

                    b.Navigation("Estate");

                    b.Navigation("MusicalInstrument");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Dress", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", "Seller")
                        .WithMany("Dresses")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Electronic", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", "Seller")
                        .WithMany("Electronics")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Estate", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", "Seller")
                        .WithMany("Estates")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.MusicalInstrument", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", "Seller")
                        .WithMany("MusicalInstruments")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.PaymentHistory", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Dress", "Dress")
                        .WithOne("Payment")
                        .HasForeignKey("MyGalaxy_Auction_Data_Access.Domain.PaymentHistory", "DressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Electronic", "Electronic")
                        .WithOne("Payment")
                        .HasForeignKey("MyGalaxy_Auction_Data_Access.Domain.PaymentHistory", "ElectronicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Estate", "Estate")
                        .WithOne("Payment")
                        .HasForeignKey("MyGalaxy_Auction_Data_Access.Domain.PaymentHistory", "EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.MusicalInstrument", "MusicalInstrument")
                        .WithOne("Payment")
                        .HasForeignKey("MyGalaxy_Auction_Data_Access.Domain.PaymentHistory", "MusicalInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", "User")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGalaxy_Auction_Data_Access.Domain.Vehicle", "Vehicle")
                        .WithOne("Payment")
                        .HasForeignKey("MyGalaxy_Auction_Data_Access.Domain.PaymentHistory", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dress");

                    b.Navigation("Electronic");

                    b.Navigation("Estate");

                    b.Navigation("MusicalInstrument");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Vehicle", b =>
                {
                    b.HasOne("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", "Seller")
                        .WithMany("Vehicles")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Dress", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Electronic", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Estate", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.MusicalInstrument", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Domain.Vehicle", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("MyGalaxy_Auction_Data_Access.Models.ApplicationUser", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Dresses");

                    b.Navigation("Electronics");

                    b.Navigation("Estates");

                    b.Navigation("MusicalInstruments");

                    b.Navigation("PaymentHistories");

                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
